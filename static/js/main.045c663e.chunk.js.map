{"version":3,"sources":["fbase.js","components/AuthForm.js","routes/Auth.js","components/Profile.js","components/TodoListTable.js","components/Todo.js","components/TodoListAssign.js","components/Timer.js","components/Notice.js","routes/Home.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseInstance","authService","auth","dbService","firestore","storage","AuthForm","useState","email","setEmail","password","setPassword","newAccount","setNewAccount","error","setError","onChange","event","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","data","signInWithEmailAndPassword","console","log","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","signInWithPopup","icon","faGoogle","faGithub","Profile","refreshUser","userObj","nameEdit","setNameEdit","history","useHistory","displayName","newDisplayName","setNewDisplayName","updateProfile","autoFocus","faUserEdit","window","confirm","signOut","push","faPowerOff","TodoListTable","todoObj","editing","setEditing","work","newWork","setNewWork","subject","newSubject","setNewSubject","format","newFormat","setNewFormat","duedate","newDate","setNewDate","convertTime","setConvertTime","useEffect","convertedTime","inputTime","hours","String","Math","floor","padStart","minutes","secondsToHhMmSs","studyTime","onDeleteClick","doc","uid","id","delete","toggleEditing","update","faCheckCircle","size","faBan","inputDateString","thisDate","split","join","deleteYear","faTrash","faEdit","faClipboardCheck","Todo","todoLists","filterTarget","setFilterTarget","sortTodo","setSortTodo","filteredTodoLists","filter","todoList","collection","orderBy","onSnapshot","snapshot","todoArray_a","docs","map","baseArray","filterArray","clickedFilter","innerText","todo","Set","filterObj","uuidv4","colSpan","TodoListAssign","setWork","setSubject","setFormat","date","setDate","newTodoListObj","createdAt","Date","now","creatorId","add","faPlusSquare","Timer","displayTimer","setDisplayTimer","timerOn","setTimerOn","endTime","setEndTime","startTime","setstartTime","selectedTodo","setSelectedTodo","HhMmSstoSeconds","timeData","timeArray","parseInt","interval","firstStart","setInterval","nowTime","nowTimeSeconds","restartTime","reNowTime","reNowTimeSeconds","clearInterval","addedItem","confirmAdd","length","get","beforeAddedItem","beforeTime","addedTime","totalTime","selectedSubject","faUserClock","faPlay","pauseTime","faPause","faRedo","Notice","notice","noticeString","noticeURL","url","href","faBell","faYoutube","Home","setTodoLists","todoArray","AppRouter","isLoggedIn","exact","path","from","to","App","setNotice","studyMode","setStudyMode","timerMode","setTimerMode","modeObj","setModeObj","init","setInit","setUserObj","onAuthStateChanged","user","getcurrentMode","getNotice","args","studymode","timermode","idCheckLists","currentMode","indexOf","set","currentUser","Boolean","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.045c663e.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/storage\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBM0UEJkH9cT2XTaIyazlsm90a9_iOsyE8\",\r\n  authDomain: \"pecker-8b0ae.firebaseapp.com\",\r\n  projectId: \"pecker-8b0ae\",\r\n  storageBucket: \"pecker-8b0ae.appspot.com\",\r\n  messagingSenderId: \"350251717169\",\r\n  appId: \"1:350251717169:web:1cf810a9cf1448679a3b10\",\r\n  measurementId: \"G-HMNDXD3KF3\",\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport const firebaseInstance = firebase;\r\nexport const authService = firebase.auth();\r\nexport const dbService = firebase.firestore();\r\nexport const storageSerive = firebase.storage();\r\n","import { authService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\nimport \"../css/Authform.css\";\r\n\r\nconst AuthForm = () => {\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [newAccount, setNewAccount] = useState(true);\r\n  const [error, setError] = useState(\"\");\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { name, value },\r\n    } = event;\r\n    if (name === \"email\") {\r\n      setEmail(value);\r\n    } else if (name === \"password\") {\r\n      setPassword(value);\r\n    }\r\n  };\r\n  const toggleAccount = () => setNewAccount((prev) => !prev);\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      let data;\r\n      if (newAccount) {\r\n        data = await authService.createUserWithEmailAndPassword(\r\n          email,\r\n          password\r\n        );\r\n      } else {\r\n        data = await authService.signInWithEmailAndPassword(email, password);\r\n      }\r\n      console.log(data);\r\n    } catch (error) {\r\n      setError(error.message);\r\n    }\r\n  };\r\n  return (\r\n    <>\r\n      <form className=\"auth-form-container\" onSubmit={onSubmit}>\r\n        <input\r\n          className=\"auth-input\"\r\n          name=\"email\"\r\n          type=\"text\"\r\n          placeholder=\"Email\"\r\n          required\r\n          value={email}\r\n          onChange={onChange}\r\n        />\r\n        <input\r\n          className=\"auth-input\"\r\n          name=\"password\"\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          required\r\n          value={password}\r\n          onChange={onChange}\r\n        />\r\n        <input\r\n          className=\"auth-input-btn\"\r\n          type=\"submit\"\r\n          value={newAccount ? \"Create Account\" : \"Sign In\"}\r\n          required\r\n        />\r\n        {error && <span className=\"authError\">{error}</span>}\r\n      </form>\r\n      <span className=\"auth-toggle-btn\" onClick={toggleAccount}>\r\n        {newAccount ? \"Sign In\" : \"Create Account\"}\r\n      </span>\r\n    </>\r\n  );\r\n};\r\nexport default AuthForm;\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faGoogle, faGithub } from \"@fortawesome/free-brands-svg-icons\";\r\nimport AuthForm from \"components/AuthForm\";\r\nimport { authService, firebaseInstance } from \"fbase\";\r\nimport \"../css/Auth.css\";\r\n\r\nconst Auth = () => {\r\n  const onSocialClick = async (event) => {\r\n    const {\r\n      target: { name },\r\n    } = event;\r\n    let provider;\r\n    if (name === \"google\") {\r\n      provider = new firebaseInstance.auth.GoogleAuthProvider();\r\n    } else if (name === \"github\") {\r\n      provider = new firebaseInstance.auth.GithubAuthProvider();\r\n    }\r\n    await authService.signInWithPopup(provider);\r\n  };\r\n  return (\r\n    <div className=\"authContainer\">\r\n      <AuthForm />\r\n      <div className=\"authBtns\">\r\n        <button className=\"authBtn\" onClick={onSocialClick} name=\"google\">\r\n          Continue with <span className=\"google-blue\">G</span>\r\n          <span className=\"google-red\">o</span>\r\n          <span className=\"google-yellow\">o</span>\r\n          <span className=\"google-blue\">g</span>\r\n          <span className=\"google-green\">l</span>\r\n          <span className=\"google-red\">e </span>\r\n          <FontAwesomeIcon icon={faGoogle} />\r\n        </button>\r\n        <button className=\"authBtn\" onClick={onSocialClick} name=\"github\">\r\n          Continue with Github <FontAwesomeIcon icon={faGithub} />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default Auth;\r\n","import { authService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faUserEdit, faPowerOff } from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"../css/Profile.css\";\r\n\r\nconst Profile = ({ refreshUser, userObj }) => {\r\n  const [nameEdit, setNameEdit] = useState(false);\r\n  const history = useHistory();\r\n  const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\r\n  const onLogOutClick = () => {\r\n    const okLogOut = window.confirm(\"로그아웃하시겠습니까?\");\r\n    if (okLogOut) {\r\n      authService.signOut();\r\n      history.push(\"/\");\r\n    } else {\r\n      return;\r\n    }\r\n  };\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { value },\r\n    } = event;\r\n    setNewDisplayName(value);\r\n  };\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    if (userObj.displayName !== newDisplayName) {\r\n      await userObj.updateProfile({ displayName: newDisplayName });\r\n      refreshUser();\r\n    }\r\n    setNameEdit(false);\r\n  };\r\n  return (\r\n    <div className=\"profile-container\">\r\n      <div className=\"greeting\">안녕하세요 {userObj.displayName}님</div>\r\n\r\n      <div className=\"edit-profile\">\r\n        {nameEdit ? (\r\n          <form onSubmit={onSubmit}>\r\n            <input\r\n              className=\"edit-finish-btn\"\r\n              onChange={onChange}\r\n              type=\"text\"\r\n              autoFocus\r\n              placeholder=\"New Name\"\r\n              value={newDisplayName}\r\n            />\r\n            <input\r\n              className=\"edit-finish-btn\"\r\n              type=\"submit\"\r\n              value=\"이름 변경하기\"\r\n            />\r\n          </form>\r\n        ) : (\r\n          <>\r\n            <button\r\n              className=\"profile-edit-btn\"\r\n              onClick={() => setNameEdit(true)}\r\n            >\r\n              <FontAwesomeIcon icon={faUserEdit} />\r\n              &nbsp; 이름 수정\r\n            </button>\r\n          </>\r\n        )}\r\n      </div>\r\n      <div className=\"logout-container\">\r\n        <button className=\"logout-btn\" onClick={onLogOutClick}>\r\n          <FontAwesomeIcon icon={faPowerOff} />\r\n          &nbsp; 로그아웃\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n","import { dbService } from \"fbase\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faClipboardCheck,\r\n  faEdit,\r\n  faTrash,\r\n  faBan,\r\n  faCheckCircle,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"../css/TodoListTable.css\";\r\n\r\nconst TodoListTable = ({ userObj, todoObj }) => {\r\n  const [editing, setEditing] = useState(false);\r\n  const [newWork, setNewWork] = useState(todoObj.work);\r\n  const [newSubject, setNewSubject] = useState(todoObj.subject);\r\n  const [newFormat, setNewFormat] = useState(todoObj.format);\r\n  const [newDate, setNewDate] = useState(todoObj.duedate);\r\n\r\n  const [convertTime, setConvertTime] = useState(\"00:00:00\");\r\n  function secondsToHhMmSs(inputTime) {\r\n    let hours = String(Math.floor(inputTime / 3600)).padStart(2, \"0\");\r\n    let minutes = String(Math.floor((inputTime - 3600 * hours) / 60)).padStart(\r\n      2,\r\n      \"0\"\r\n    );\r\n    let seconds = String(inputTime - 3600 * hours - 60 * minutes).padStart(\r\n      2,\r\n      \"0\"\r\n    );\r\n    const HhMmSs = hours + \":\" + minutes + \":\" + seconds;\r\n    return HhMmSs;\r\n  }\r\n\r\n  function deleteYear(inputDateString) {\r\n    let thisDate = inputDateString.split(\"-\");\r\n    let newDate = [thisDate[1], thisDate[2]].join(\"-\");\r\n    return newDate;\r\n  }\r\n  useEffect(() => {\r\n    const convertedTime = secondsToHhMmSs(todoObj.studyTime);\r\n    setConvertTime(convertedTime);\r\n  }, []);\r\n\r\n  const onDeleteClick = async () => {\r\n    const ok = window.confirm(\"삭제하시겠습니까?\");\r\n    if (ok) {\r\n      await dbService.doc(`${userObj.uid}/${todoObj.id}`).delete();\r\n    }\r\n  };\r\n  const toggleEditing = () => setEditing((prev) => !prev);\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { name, value },\r\n    } = event;\r\n    if (name === \"work\") {\r\n      setNewWork(value);\r\n    } else if (name === \"subject\") {\r\n      setNewSubject(value);\r\n    } else if (name === \"format\") {\r\n      setNewFormat(value);\r\n    } else if (name === \"date\") {\r\n      setNewDate(value);\r\n    }\r\n  };\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    await dbService.doc(`${userObj.uid}/${todoObj.id}`).update({\r\n      work: newWork,\r\n      subject: newSubject,\r\n      format: newFormat,\r\n      duedate: newDate,\r\n    });\r\n    setEditing(false);\r\n  };\r\n  return (\r\n    <>\r\n      {editing ? (\r\n        <tr className=\"todolist-row\">\r\n          <td className=\"todo-edit-task-box\">\r\n            <input\r\n              className=\"todo-edit-task\"\r\n              name=\"work\"\r\n              value={newWork}\r\n              type=\"text\"\r\n              placeholder={todoObj.work}\r\n              onChange={onChange}\r\n              required\r\n            />\r\n          </td>\r\n          <td className=\"todo-edit-category-box\">\r\n            <input\r\n              className=\"todo-edit-category\"\r\n              name=\"subject\"\r\n              value={newSubject}\r\n              type=\"text\"\r\n              placeholder={todoObj.subject}\r\n              onChange={onChange}\r\n              required\r\n            />\r\n          </td>\r\n          <td className=\"todo-edit-format-box\">\r\n            <input\r\n              className=\"todo-edit-format\"\r\n              name=\"format\"\r\n              value={newFormat}\r\n              type=\"text\"\r\n              placeholder={todoObj.format}\r\n              onChange={onChange}\r\n              required\r\n            />\r\n          </td>\r\n          <td className=\"todo-edit-due-box\">\r\n            <input\r\n              className=\"todo-edit-due\"\r\n              name=\"date\"\r\n              value={newDate}\r\n              type=\"date\"\r\n              onChange={onChange}\r\n              required\r\n            />\r\n          </td>\r\n          <td className=\"todo-table-study-column\">{convertTime}</td>\r\n          <td>\r\n            <button className=\"todolist-btn edit-btn\" onClick={onSubmit}>\r\n              <FontAwesomeIcon icon={faCheckCircle} size=\"lg\" />\r\n            </button>\r\n          </td>\r\n          <td>\r\n            <button className=\"todolist-btn cancel-btn\" onClick={toggleEditing}>\r\n              <FontAwesomeIcon icon={faBan} size=\"lg\" />\r\n            </button>\r\n          </td>\r\n        </tr>\r\n      ) : (\r\n        <>\r\n          <tr className=\"todolist-row\">\r\n            <td className=\"todo-table-task-column\">{todoObj.work}</td>\r\n            <td className=\"todo-table-category-column\">{todoObj.subject}</td>\r\n            <td className=\"todo-table-format-column\">{todoObj.format}</td>\r\n            <td className=\"todo-table-due-column\">\r\n              {deleteYear(todoObj.duedate)}\r\n            </td>\r\n            <td className=\"todo-table-study-column\">{convertTime}</td>\r\n            <td>\r\n              <button\r\n                className=\"todolist-btn cancel-btn\"\r\n                onClick={onDeleteClick}\r\n              >\r\n                <FontAwesomeIcon icon={faTrash} size=\"lg\" />\r\n              </button>\r\n            </td>\r\n            <td>\r\n              <button className=\"todolist-btn edit-btn\" onClick={toggleEditing}>\r\n                <FontAwesomeIcon icon={faEdit} size=\"lg\" />\r\n              </button>\r\n            </td>\r\n            <td>\r\n              <button className=\"todolist-btn edit-btn\">\r\n                <FontAwesomeIcon icon={faClipboardCheck} size=\"lg\" />\r\n              </button>\r\n            </td>\r\n          </tr>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TodoListTable;\r\n","import { dbService } from \"fbase\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport TodoListTable from \"./TodoListTable\";\r\nimport \"../css/Todo.css\";\r\n\r\nconst Todo = ({ todoLists, userObj }) => {\r\n  const [filterTarget, setFilterTarget] = useState(\"\");\r\n  const [sortTodo, setSortTodo] = useState(todoLists);\r\n\r\n  useEffect(() => {\r\n    if (filterTarget !== \"\") {\r\n      const filteredTodoLists = todoLists.filter(\r\n        (todoList) => todoList.subject === filterTarget\r\n      );\r\n      setSortTodo(filteredTodoLists);\r\n    } else {\r\n      dbService\r\n        .collection(`${userObj.uid}`)\r\n        .orderBy(\"createdAt\", \"desc\")\r\n        .onSnapshot((snapshot) => {\r\n          const todoArray_a = snapshot.docs.map((doc) => ({\r\n            id: doc.id,\r\n            ...doc.data(),\r\n          }));\r\n          setSortTodo(todoArray_a);\r\n        });\r\n    }\r\n  }, [filterTarget]);\r\n\r\n  let baseArray = [];\r\n  let filterArray = [];\r\n\r\n  const onClick = (event) => {\r\n    const clickedFilter = event.target.innerText;\r\n    setFilterTarget(clickedFilter);\r\n  };\r\n  const unfilter = (event) => {\r\n    setFilterTarget(\"\");\r\n  };\r\n  const subjectArray = todoLists.map((todo) => {\r\n    baseArray.push(todo.subject);\r\n  });\r\n  const targetSubject = [...new Set(baseArray)];\r\n  const filtering = targetSubject.map((doc) => {\r\n    const filterObj = {\r\n      id: uuidv4(),\r\n      subject: doc,\r\n    };\r\n    filterArray.push(filterObj);\r\n  });\r\n  return (\r\n    <>\r\n      <div>\r\n        <h1 className=\"todo-title\">Todo List</h1>\r\n        <div className=\"todo-filter-div\">\r\n          <button className=\"todo-filter-btn\" onClick={unfilter}>\r\n            전체\r\n          </button>\r\n          {filterArray.map((doc) => (\r\n            <button className=\"todo-filter-btn\" onClick={onClick} key={doc.id}>\r\n              {doc.subject}\r\n            </button>\r\n          ))}\r\n        </div>\r\n        <div className=\"todolists-table-container\">\r\n          <table className=\"todolist-table\">\r\n            <thead className=\"todolist-thead fixedHeader\">\r\n              <tr>\r\n                <th className=\"todolist-task-column\">할 일</th>\r\n                <th className=\"todolist-category-column\">카테고리</th>\r\n                <th className=\"todolist-format-column\">형식</th>\r\n                <th className=\"todolist-due-column\">마감일</th>\r\n                <th className=\"todolist-studytime-column\">소요 시간</th>\r\n                <th colSpan=\"3\" className=\"todolist-button-column\">\r\n                  Buttons\r\n                </th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {sortTodo.map((todoList) => (\r\n                <TodoListTable\r\n                  userObj={userObj}\r\n                  key={todoList.id}\r\n                  todoObj={todoList}\r\n                />\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","import { dbService } from \"fbase\";\r\nimport React, { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faPlusSquare } from \"@fortawesome/free-regular-svg-icons\";\r\nimport \"../css/TodoListAssign.css\";\r\n\r\nconst TodoListAssign = ({ userObj }) => {\r\n  const [work, setWork] = useState(\"\");\r\n  const [subject, setSubject] = useState(\"\");\r\n  const [format, setFormat] = useState(\"\");\r\n  const [date, setDate] = useState(\"\");\r\n\r\n  const onChange = (event) => {\r\n    const {\r\n      target: { name, value },\r\n    } = event;\r\n    if (name === \"work\") {\r\n      setWork(value);\r\n    } else if (name === \"subject\") {\r\n      setSubject(value);\r\n    } else if (name === \"format\") {\r\n      setFormat(value);\r\n    } else if (name === \"date\") {\r\n      setDate(value);\r\n    }\r\n  };\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n    const newTodoListObj = {\r\n      work: work,\r\n      subject: subject,\r\n      format: format,\r\n      duedate: date,\r\n      createdAt: Date.now(),\r\n      creatorId: userObj.uid,\r\n      studyTime: 0,\r\n    };\r\n    await dbService.collection(`${userObj.uid}`).add(newTodoListObj);\r\n    setWork(\"\");\r\n    setSubject(\"\");\r\n    setFormat(\"\");\r\n  };\r\n  return (\r\n    <form className=\"todo-form-container\" onSubmit={onSubmit}>\r\n      <table className=\"todo-assign-table\">\r\n        <tbody>\r\n          <tr className=\"todo-assign-row\">\r\n            <td className=\"todo-assign-column\">Task</td>\r\n            <td>\r\n              <input\r\n                className=\"todo-assign-input\"\r\n                name=\"work\"\r\n                value={work}\r\n                type=\"text\"\r\n                placeholder=\"Task\"\r\n                onChange={onChange}\r\n                required\r\n              />\r\n            </td>\r\n          </tr>\r\n          <tr className=\"todo-assign-row\">\r\n            <td className=\"todo-assign-column\">Category</td>\r\n            <td>\r\n              <input\r\n                className=\"todo-assign-input\"\r\n                name=\"subject\"\r\n                value={subject}\r\n                type=\"text\"\r\n                placeholder=\"Category\"\r\n                onChange={onChange}\r\n                required\r\n              />\r\n            </td>\r\n          </tr>\r\n          <tr className=\"todo-assign-row\">\r\n            <td className=\"todo-assign-column\">Format</td>\r\n            <td>\r\n              <input\r\n                className=\"todo-assign-input\"\r\n                name=\"format\"\r\n                value={format}\r\n                type=\"text\"\r\n                placeholder=\"Format\"\r\n                onChange={onChange}\r\n                required\r\n              />\r\n            </td>\r\n          </tr>\r\n          <tr className=\"todo-assign-row\">\r\n            <td className=\"todo-assign-column\">DueDate</td>\r\n            <td>\r\n              <input\r\n                className=\"todo-assign-input\"\r\n                name=\"date\"\r\n                type=\"date\"\r\n                onChange={onChange}\r\n                required\r\n              />\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n      <button className=\"todo-assign-submit-btn\" onSubmit={onSubmit}>\r\n        <FontAwesomeIcon icon={faPlusSquare} /> 추가하기\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default TodoListAssign;\r\n","import { dbService } from \"fbase\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faUserClock,\r\n  faPlay,\r\n  faPause,\r\n  faRedo,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"../css/Timer.css\";\r\n\r\nconst Timer = ({ userObj, todoLists }) => {\r\n  const [displayTimer, setDisplayTimer] = useState(\"00:00:00\");\r\n  const [timerOn, setTimerOn] = useState(false);\r\n  const [endTime, setEndTime] = useState(0);\r\n  const [startTime, setstartTime] = useState(0);\r\n  const [selectedTodo, setSelectedTodo] = useState(\"\");\r\n\r\n  function secondsToHhMmSs(inputTime) {\r\n    let hours = String(Math.floor(inputTime / 3600)).padStart(2, \"0\");\r\n    let minutes = String(Math.floor((inputTime - 3600 * hours) / 60)).padStart(\r\n      2,\r\n      \"0\"\r\n    );\r\n    let seconds = String(inputTime - 3600 * hours - 60 * minutes).padStart(\r\n      2,\r\n      \"0\"\r\n    );\r\n    const HhMmSs = hours + \":\" + minutes + \":\" + seconds;\r\n    return HhMmSs;\r\n  }\r\n  function HhMmSstoSeconds(timeData) {\r\n    let timeArray = timeData.split(\":\");\r\n    const hh = parseInt(timeArray[0]);\r\n    const mm = parseInt(timeArray[1]);\r\n    const ss = parseInt(timeArray[2]);\r\n    let usageTime_toSeconds = 0;\r\n    usageTime_toSeconds = hh * 3600 + mm * 60 + ss;\r\n    return usageTime_toSeconds;\r\n  }\r\n  useEffect(() => {\r\n    let interval;\r\n    if (timerOn) {\r\n      if (endTime === 0) {\r\n        const firstStart = Date.now();\r\n        setstartTime(firstStart);\r\n        interval = setInterval(() => {\r\n          const nowTime = Date.now();\r\n          const nowTimeSeconds = Math.floor((nowTime - firstStart) / 1000);\r\n          setDisplayTimer(secondsToHhMmSs(nowTimeSeconds));\r\n        }, 1000);\r\n      } else {\r\n        const restartTime = startTime - endTime + Date.now();\r\n        setstartTime(restartTime);\r\n        interval = setInterval(() => {\r\n          const reNowTime = Date.now();\r\n          const reNowTimeSeconds = Math.floor((reNowTime - restartTime) / 1000);\r\n          setDisplayTimer(secondsToHhMmSs(reNowTimeSeconds));\r\n        }, 1000);\r\n      }\r\n    } else {\r\n      clearInterval(interval);\r\n    }\r\n    return () => clearInterval(interval);\r\n  }, [timerOn]);\r\n\r\n  const onStart = () => {\r\n    setTimerOn(true);\r\n  };\r\n  const onPause = () => {\r\n    const pauseTime = Date.now();\r\n    setEndTime(pauseTime);\r\n    setTimerOn(false);\r\n  };\r\n  const onReset = () => {\r\n    setTimerOn(false);\r\n    setDisplayTimer(\"00:00:00\");\r\n    setEndTime(0);\r\n  };\r\n\r\n  const onSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    const addedItem = todoLists.filter(\r\n      (todoList) => todoList.createdAt === parseInt(selectedTodo)\r\n    );\r\n    const confirmAdd = window.confirm(\"해당 작업에 시간을 추가하시겠습니까?\");\r\n    if (addedItem.length === 1 && confirmAdd) {\r\n      const beforeAddedItem = await dbService\r\n        .doc(`${userObj.uid}/${addedItem[0].id}`)\r\n        .get();\r\n      const beforeTime = beforeAddedItem.data().studyTime;\r\n      const addedTime = HhMmSstoSeconds(displayTimer);\r\n      const totalTime = beforeTime + addedTime;\r\n      await dbService\r\n        .doc(`${userObj.uid}/${addedItem[0].id}`)\r\n        .update({ studyTime: totalTime });\r\n      setDisplayTimer(\"00:00:00\");\r\n      setEndTime(0);\r\n    } else {\r\n      return;\r\n    }\r\n  };\r\n  const onChange = async (event) => {\r\n    const selectedSubject = event.target.value;\r\n    await setSelectedTodo(selectedSubject);\r\n  };\r\n  return (\r\n    <>\r\n      <div>\r\n        <div className=\"timer-title\">\r\n          <FontAwesomeIcon icon={faUserClock} />\r\n          &nbsp;&nbsp;Study Timer\r\n        </div>\r\n        <div className=\"display-time\">{displayTimer}</div>\r\n        <div className=\"timer-btns\">\r\n          {!timerOn && (\r\n            <button className=\"timer-btn left-btn\" onClick={onStart}>\r\n              <FontAwesomeIcon icon={faPlay} size=\"2x\" />\r\n            </button>\r\n          )}\r\n          {timerOn && (\r\n            <button className=\"timer-btn left-btn\" onClick={onPause}>\r\n              <FontAwesomeIcon icon={faPause} size=\"2x\" />\r\n            </button>\r\n          )}\r\n          <button className=\"timer-btn right-btn\" onClick={onReset}>\r\n            <FontAwesomeIcon icon={faRedo} size=\"2x\" />\r\n          </button>\r\n        </div>\r\n\r\n        {timerOn ? (\r\n          <></>\r\n        ) : (\r\n          <div className=\"add-timer-container\">\r\n            <form onSubmit={onSubmit}>\r\n              <select\r\n                className=\"timer-select-todolists\"\r\n                onChange={onChange}\r\n                name=\"studyTime\"\r\n              >\r\n                <option value=\"\">--Please choose a task--</option>\r\n                {todoLists.map((doc) => (\r\n                  <option key={doc.id} value={doc.createdAt}>\r\n                    {doc.work}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n              <button className=\"timer-select-btn\" onSubmit={onSubmit}>\r\n                시간 추가\r\n              </button>\r\n            </form>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faBell } from \"@fortawesome/free-regular-svg-icons\";\r\nimport { faYoutube } from \"@fortawesome/free-brands-svg-icons\";\r\nimport \"../css/Notice.css\";\r\n\r\nconst Notice = ({ notice }) => {\r\n  const noticeString = notice.notice;\r\n  const noticeURL = notice.url;\r\n  return (\r\n    <div className=\"notice-container\">\r\n      <a className=\"notice-sentence\" href={noticeURL}>\r\n        <FontAwesomeIcon icon={faBell} />\r\n        &nbsp; {noticeString}{\" \"}\r\n      </a>\r\n      <a\r\n        className=\"own-youtube\"\r\n        href=\"https://www.youtube.com/channel/UCZf62-sE0Xnm_nXefPAJ6YQ\"\r\n      >\r\n        <FontAwesomeIcon icon={faYoutube} />\r\n        &nbsp;프로젝트 개발기록\r\n      </a>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Notice;\r\n","import Profile from \"components/Profile\";\r\nimport Todo from \"components/Todo\";\r\nimport TodoListAssign from \"components/TodoListAssign\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport Timer from \"components/Timer\";\r\nimport { dbService } from \"fbase\";\r\nimport \"../css/Home.css\";\r\nimport Notice from \"components/Notice\";\r\n\r\n// Todo.js만들어서 다 넣어버리기\r\nconst Home = ({ notice, userObj, refreshUser }) => {\r\n  const [todoLists, setTodoLists] = useState([]);\r\n  useEffect(() => {\r\n    dbService\r\n      .collection(`${userObj.uid}`)\r\n      .orderBy(\"createdAt\", \"desc\")\r\n      .onSnapshot((snapshot) => {\r\n        const todoArray = snapshot.docs.map((doc) => ({\r\n          id: doc.id,\r\n          ...doc.data(),\r\n        }));\r\n        setTodoLists(todoArray);\r\n      });\r\n  }, []);\r\n  return (\r\n    <>\r\n      <div className=\"home-container\">\r\n        <div className=\"first-inner-container\">\r\n          <div className=\"first-box-container box-container\">\r\n            <Profile\r\n              className=\"home-profile\"\r\n              userObj={userObj}\r\n              refreshUser={refreshUser}\r\n            />\r\n            <TodoListAssign className=\"home-todo-assign\" userObj={userObj} />\r\n          </div>\r\n          <div className=\"second-box-container box-container\">\r\n            <Timer userObj={userObj} todoLists={todoLists} />\r\n          </div>\r\n        </div>\r\n        <div className=\"second-inner-container\">\r\n          <div className=\"third-box-container box-container\">\r\n            <Todo userObj={userObj} todoLists={todoLists} />\r\n          </div>\r\n          <div className=\"fourth-box-container box-container\">\r\n            <Notice notice={notice} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport {\r\n  HashRouter as Router,\r\n  Redirect,\r\n  Route,\r\n  Switch,\r\n} from \"react-router-dom\";\r\nimport Auth from \"routes/Auth\";\r\nimport Home from \"routes/Home\";\r\n\r\nconst AppRouter = ({ notice, refreshUser, isLoggedIn, userObj }) => {\r\n  return (\r\n    <Router>\r\n      <Switch>\r\n        {isLoggedIn ? (\r\n          <>\r\n            <Route exact path=\"/\">\r\n              <Home\r\n                notice={notice}\r\n                userObj={userObj}\r\n                refreshUser={refreshUser}\r\n              />\r\n            </Route>\r\n            <Redirect from=\"*\" to=\"/\" />\r\n          </>\r\n        ) : (\r\n          <Route exact path=\"/\">\r\n            <Auth />\r\n          </Route>\r\n        )}\r\n      </Switch>\r\n    </Router>\r\n  );\r\n};\r\n\r\nexport default AppRouter;\r\n","import React, { useEffect, useState } from \"react\";\nimport AppRouter from \"components/Router\";\nimport { authService, dbService } from \"fbase\";\nimport \"../css/App.css\";\n\nfunction App() {\n  const [notice, setNotice] = useState(\"\");\n  const [studyMode, setStudyMode] = useState(null);\n  const [timerMode, setTimerMode] = useState(null);\n  const [modeObj, setModeObj] = useState(null);\n  const [init, setInit] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if (user) {\n        getcurrentMode(user.uid);\n        getNotice();\n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: (args) => user.updateProfile(args),\n        });\n        setModeObj({ studymode: studyMode, timermode: timerMode });\n      } else {\n        setUserObj(null);\n      }\n      setInit(true);\n    });\n  }, []);\n  const refreshUser = () => {\n    const user = authService.currentUser;\n    getcurrentMode(user.uid);\n    setUserObj({\n      displayName: user.displayName,\n      uid: user.uid,\n      updateProfile: (args) => user.updateProfile(args),\n    });\n    setModeObj({ studymode: studyMode, timermode: timerMode });\n  };\n\n  const getcurrentMode = async (uid) => {\n    const idCheckLists = [];\n    const currentMode = await dbService.collection(\"usermode\").get();\n    currentMode.docs.map((doc) => idCheckLists.push(doc.id));\n    const identifier = idCheckLists.indexOf(uid);\n    if (identifier === -1) {\n      await dbService\n        .collection(\"usermode\")\n        .doc(`${uid}`)\n        .set({ uid: uid, studymode: true, timermode: false });\n    } else {\n      currentMode.docs.map((doc) => {\n        if (doc.data().uid === uid) {\n          setStudyMode(doc.data().studymode);\n          setTimerMode(doc.data().timermode);\n        }\n      });\n    }\n  };\n\n  const getNotice = async () => {\n    const noticeString = await dbService\n      .doc(\"notice/RhvYJs0ZJ0XhjrsolJRe\")\n      .get();\n    setNotice(noticeString.data());\n  };\n\n  return (\n    <>\n      <div className=\"initial-component\">\n        {init ? (\n          <AppRouter\n            notice={notice}\n            modeObj={modeObj}\n            refreshUser={refreshUser}\n            isLoggedIn={Boolean(userObj)}\n            userObj={userObj}\n          />\n        ) : (\n          \"Initalizing...\"\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"components/App\";\nimport \"css/index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}